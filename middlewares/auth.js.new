const jwt = require('jsonwebtoken');
const User = require('../models/User');

// Rate limiting configuration
const rateLimit = {
  windowMs: 15 * 60 * 1000, // 15 minutes
  maxAttempts: 5,
  attempts: new Map()
};

// Rate limiting middleware
exports.rateLimiter = async (req, res, next) => {
  const ip = req.ip;
  const now = Date.now();
  const windowStart = now - rateLimit.windowMs;

  // Get attempts for this IP
  let attempts = rateLimit.attempts.get(ip) || [];
  
  // Filter attempts within window
  attempts = attempts.filter(timestamp => timestamp > windowStart);
  
  if (attempts.length >= rateLimit.maxAttempts) {
    return res.status(429).json({
      success: false,
      message: 'Too many attempts. Please try again later.'
    });
  }

  attempts.push(now);
  rateLimit.attempts.set(ip, attempts);
  next();
};

// Protect routes - Authentication middleware
exports.protect = async (req, res, next) => {
  try {
    let token;

    // Check for token in Authorization header
    if (req.headers.authorization?.startsWith('Bearer')) {
      token = req.headers.authorization.split(' ')[1];
    } 
    // Check for token in cookie
    else if (req.cookies?.token) {
      token = req.cookies.token;
    }

    if (!token) {
      return res.status(401).json({
        success: false,
        message: 'Not authorized to access this route'
      });
    }

    try {
      // Verify token
      const decoded = jwt.verify(token, process.env.JWT_SECRET);

      // Get user
      const user = await User.findById(decoded.id);
      if (!user) {
        return res.status(401).json({
          success: false,
          message: 'User not found'
        });
      }

      // Check if user's email is verified (except for email verification routes)
      if (!user.isEmailVerified && !req.path.includes('/verify-email')) {
        return res.status(401).json({
          success: false,
          message: 'Please verify your email first'
        });
      }

      req.user = user;
      next();
    } catch (error) {
      return res.status(401).json({
        success: false,
        message: 'Not authorized to access this route'
      });
    }
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Server Error',
      error: error.message
    });
  }
};

// Grant access to specific roles
exports.authorize = (...roles) => {
  return (req, res, next) => {
    if (!roles.includes(req.user.role)) {
      return res.status(403).json({
        success: false,
        message: `User role ${req.user.role} is not authorized to access this route`
      });
    }
    next();
  };
};
